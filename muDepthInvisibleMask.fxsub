///////////////////////////////////////////////////////////////////////////////////////////////
// 深度描画 [DepthMap(エーアイス様)]より

#define TEXSHADOW 1
const float AlphaThreshold = 0.7;

float4x4 WorldViewProjMatrix    : WORLDVIEWPROJECTION;
float4   MaterialDiffuse        : DIFFUSE  < string Object = "Geometry"; >;
float3   CameraPosition         : POSITION  < string Object = "Camera"; >;
bool use_texture;

// オブジェクトのテクスチャ
texture ObjectTexture: MATERIALTEXTURE;
sampler ObjTexSampler = sampler_state {
    texture = <ObjectTexture>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
};

// MMD本来のsamplerを上書きしないための記述です。削除不可。
sampler MMDSamp0 : register(s0);
sampler MMDSamp1 : register(s1);
sampler MMDSamp2 : register(s2);



///////////////////////////////////////////////////////////////////////////////////////////////
// オブジェクト描画

struct VS_OUTPUT {
    float4 Pos        : POSITION;              // 射影変換座標
    float2 Tex        : TEXCOORD0;
    float  Distance   : TEXCOORD1;
    float  WorldScale : TEXCOORD2;
};

// 頂点シェーダ
VS_OUTPUT Basic_VS(float4 Pos : POSITION, float2 Tex : TEXCOORD0)
{
    VS_OUTPUT Out = (VS_OUTPUT)0;
    
    Out.Pos = mul( Pos, WorldViewProjMatrix );
    Out.WorldScale = Out.Pos.w;
    
//    Out.Distance = CameraPosition - Pos.xyz;
    Out.Distance = Out.Pos.z;
    
    Out.Tex = Tex;
    
    return Out;
}

// ピクセルシェーダ
float4 Basic_PS(VS_OUTPUT IN, uniform bool useTexture) : COLOR0
{
//    float depth = IN.Distance / IN.WorldScale;
    float depth = IN.Distance / IN.WorldScale;
    float4 color;
    
    //r値にz、g値にマスク
    color = float4(depth, 1, 0, 0);
    
    #if TEXSHADOW==1
        float alpha = MaterialDiffuse.a;
        if(useTexture) alpha *= tex2D(ObjTexSampler, IN.Tex).a;
        
        color.a = (alpha > AlphaThreshold);
    #endif
    
    return color;
    
}


// オブジェクト描画用テクニック
technique MainTec0 < string MMDPass = "object"; bool UseTexture = false; > {
    pass DrawObject {
        ALPHABLENDENABLE = false;
        VertexShader = compile vs_2_0 Basic_VS();
        PixelShader  = compile ps_2_0 Basic_PS(false);
    }
}

technique MainTec1 < string MMDPass = "object"; bool UseTexture = true; > {
    pass DrawObject {
        ALPHABLENDENABLE = false;
        VertexShader = compile vs_2_0 Basic_VS();
        PixelShader  = compile ps_2_0 Basic_PS(true);
    }
}

technique MainTec0SS < string MMDPass = "object_ss"; bool UseTexture = false; > {
    pass DrawObject {
        ALPHABLENDENABLE = false;
        VertexShader = compile vs_2_0 Basic_VS();
        PixelShader  = compile ps_2_0 Basic_PS(false);
    }
}

technique MainTec1SS < string MMDPass = "object_ss"; bool UseTexture = true; > {
    pass DrawObject {
        ALPHABLENDENABLE = false;
        VertexShader = compile vs_2_0 Basic_VS();
        PixelShader  = compile ps_2_0 Basic_PS(true);
    }
}


////////////////////////////////////////////////////////////////////////////////////////////

// 輪郭は表示しない
technique EdgeTec < string MMDPass = "edge"; > { }
// 地面影は表示しない
technique ShadowTec < string MMDPass = "shadow"; > { }
// MMD標準のセルフシャドウは表示しない
technique ZplotTec < string MMDPass = "zplot"; > { }

